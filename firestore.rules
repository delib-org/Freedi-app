rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function cleanPath(path) {
      return path.split('/').join('_');
    }
    
    // All collection rules
    match /termsOfUseAcceptance/{document} {
      allow read: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.userId &&
                     request.resource.data.accepted == true;
    }
	
	match /online/{onlineId} {
 	 allow read: if request.auth.uid != null;
  	allow write: if request.auth.uid != null;
	}

    match /awaitingUsers/{document=**} {
      allow read, write: if request.auth != null;
    }

    match /councils/{councilId=**} {
      allow read;
      allow write: if request.auth.uid != null;
    }

    match /version/{version=**} {
      allow read;
    }

	match /polarizationIndex/{statementId=**} {
	  allow read: if request.auth.uid != null;
	
	}

	match /userDemographic/{userId=**} {
	  allow read: if request.auth.uid != null && request.auth.uid == userId;
	  allow write: if request.auth.uid != null && request.auth.uid == userId;
	}

  match /fairDivision/{userId=**} {
	  allow read: if request.auth.uid != null && request.auth.uid == userId;
	  allow write: if request.auth.uid != null && request.auth.uid == userId;
	}

	match /userDemographicQuestions/{questionId=**} {
		function isAdmin() {
			let question = resource != null ? resource : request.resource;
			let statementId = question.data.statementId;
			let subId = string(request.auth.uid) + '--' + cleanPath(string(statementId));
			let subscription = get(/databases/$(database)/documents/statementsSubscribe/$(subId)).data;
			return subscription != null && subscription.role == 'admin';
		}
		
		allow read: if request.auth.uid != null;
		allow write: if request.auth.uid != null && isAdmin();
	}

    match /statements/{statementId} {
      function isAdmin() {
        let subId = string(request.auth.uid) + '--' + cleanPath(string(statementId));
        let subscription = get(/databases/$(database)/documents/statementsSubscribe/$(subId)).data;
        return subscription != null && subscription.role == 'admin';
      }
      
      function isCreator() {
        return request.auth.uid != null && resource.data.creatorId == request.auth.uid;
      }
      
      function hasProtectedFieldChanges() {
        return resource != null && request.resource != null && (
          // Check if questionSettings is being modified
          (request.resource.data.questionSettings != resource.data.questionSettings) ||
          // Check if statementSettings is being modified
          (request.resource.data.statementSettings != resource.data.statementSettings)
        );
      }
      
      // Only allow membership.access to be changed by admins or creator
      function hasUnauthorizedAccessChange() {
        return resource != null && request.resource != null &&
               request.resource.data.membership.access != resource.data.membership.access &&
               !(isAdmin() || isCreator());
      }
      
      function isAllowedToUpdate() {
        return !hasProtectedFieldChanges() && !hasUnauthorizedAccessChange() || 
               (isAdmin() || isCreator());
      }
      
      allow read;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid != null && isAllowedToUpdate();
      allow delete: if request.auth.uid != null && (isAdmin() || isCreator());
    }

    match /inAppNotifications/{inAppNotificationId=**} {
      allow read: if request.auth.uid == resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if request.auth.uid == resource.data.userId;
    }

    match /pushNotifications/{pushNotificationId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /askedToBeNotified/{askedToBeNotifiedId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /statementsMeta/{statementId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /importance/{importanceId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /statementViews/{statementId=**} {
      allow write: if request.auth.uid != null;
      allow read: if request.auth.uid != null;
    }

    match /statementSegments/{segementId=**} {
      allow write: if request.auth.uid != null;
      allow read: if request.auth.uid != null;
    }

    match /approval/{approvalId=**} {
      allow read;
      allow write: if request.auth.uid != null;
    }
    
    match /documentsSigns/{documentsSignId=**} {
      allow read: if request.auth.uid != null;
    }
    
    match /signatures/{signaturesId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }
    
    match /agrees/{agreeId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }
    
    match /invitations/{invitationId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }
    
    match /admins/{adminStatementId=**} {
      allow write: if request.auth.uid == request.resource.data.user.uid;
    }
    
   match /statementsSubscribe/{statementSubId} {
      // Simple getter functions
      function isSubscriber() {
        return request.auth.uid != null && resource.data.userId == request.auth.uid;
      }
      
      function getStatementId() {
        return resource != null ? resource.data.statementId : request.resource.data.statementId;
      }
      
      function isAdmin() {
        let statementId = getStatementId();
        let subId = string(request.auth.uid) + '--' + cleanPath(string(statementId));
        let subscription = get(/databases/$(database)/documents/statementsSubscribe/$(subId)).data;
        return subscription != null && subscription.role == 'admin';
      }
      
      function isCreator() {
        let statementId = getStatementId();
        let statement = get(/databases/$(database)/documents/statements/$(statementId)).data;
        return statement != null && statement.creatorId == request.auth.uid;
      }
      
      function isAdminOrCreator() {
        return isAdmin() || isCreator();
      }
      
      function getAccess() {
        let statementId = getStatementId();
        let statement = get(/databases/$(database)/documents/statements/$(statementId)).data;
        
        // Check for statement's own access override first, then topParent's access
        return statement != null && statement.membership != null && statement.membership.access != null 
          ? statement.membership.access 
          : (statement != null && statement.topParentId != null 
            ? get(/databases/$(database)/documents/statements/$(statement.topParentId)).data.membership.access 
            : null);
      }
      
      function isBanned() {
        return resource != null && resource.data.role == "banned";
      }
      
      function isOpenToAll() {
        return getAccess() == "openToAll";
      }
      
      function isOpenForRegistered() {
        return getAccess() == "openForRegistered";
      }
      
      function isModerated() {
        return getAccess() == "moderated";
      }
      
      function isPublic() {
        return getAccess() == "public";
      }
      
      function isWaitingRole() {
        return request.resource.data.role == "waiting";
      }
      
      function isMemberRole() {
        return request.resource.data.role == "member";
      }
      
      function isRoleUnchanged() {
        return request.resource.data.role == resource.data.role;
      }
      
      allow read: if request.auth.uid != null;
      
      // For create
      allow create: if request.auth.uid != null &&
                     (isPublic() ||
                      isOpenToAll() || 
                      isOpenForRegistered() ||
                      (isModerated() && isWaitingRole()));
      
      // For update
      allow update: if request.auth.uid != null && 
                     (isAdminOrCreator() ||
                      (isSubscriber() && 
                        (isRoleUnchanged() ||
                          (!isBanned() && 
                            ((isModerated() && isWaitingRole()) || 
                             ((isPublic() || isOpenToAll() || isOpenForRegistered()) && isMemberRole())))
                        )
                      ));
      
      // For delete
      allow delete: if request.auth.uid != null && 
                     (isAdminOrCreator() ||
                      (isSubscriber() && !isBanned()));
    }

    // The rest of the collection rules...
    match /massConsensusProcesses/{statementId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }
    
    match /statementsSignatures/{signatureId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /massConsensusMembers/{userId=**} {
      allow write: if request.auth.uid != null;
    }

    match /choseBy/{statementId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /statementRoomsAsked/{requestId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /resultsTriggers/{statementId=**} {
      allow write: if request.auth.uid != null;
    }

    match /statementLobbyRooms/{statementId=**} {
      allow read: if request.auth.uid != null;
    }

    match /awaitingUsers/{documentId} {
      function isAdminForStatement() {
        let waitingMember = resource.data;
        let statementId = waitingMember.statementId;
        let subId = string(request.auth.uid) + '--' + cleanPath(string(statementId));
        let subscription = get(/databases/$(database)/documents/statementsSubscribe/$(subId)).data;
        return subscription != null && subscription.role == 'admin';
      }

      allow read: if request.auth != null && isAdminForStatement();
      allow delete: if request.auth != null && isAdminForStatement();
      allow create, update: if false;
    }

    match /timers-settings/{timerIdx=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }
    
    match /rooms/{roomId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }
    
    match /participants/{participantId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }
    
    match /roomsSettings/{roomSettingsId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /timers-rooms/{timerIdx=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /evaluations/{evluationId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /approval/{approvalId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /statementEvaluators/{statementEvaluatorsId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /votes/{voteId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }
    
    match /posts/{postId=**} {
      allow read;
      allow write: if request.auth.uid != null;
    }
    
    match /chatMessages/{chatMessageId} {
      allow read;
      allow write: if request.auth.uid != null;
    }
    
    match /groups/{group=**} {
      allow read;
      allow write: if request.auth.uid != null;
    }
    
    match /chats/{chatId} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid == resource.data.creator.uid;
    }

    match /usersSettings/{userId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /usersData/{userId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }

    match /usersV2/{userId=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid == request.resource.data.uid;
    }

    match /users/{user} {
      allow read;
      allow write: if request.auth.uid != null;
      
      match /chat/{chat=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /chatLastEnterence/{chatLastEnterence=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /feed/{feed=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /feedLastEntrence/{feedLastEntrence=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /feeds/{feeds=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /groups/{groups=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /groupsOwned/{groupsOwned=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /messages/{messages=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /messagesCounter/{messagesCounter=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /optionsRead/{optionsRead=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /registerGroups/{registerGroups=**} {
        allow read;
        allow write: if request.auth.uid != null;
      }
      
      match /memberships/{membership} {
        allow read: if request.auth.uid != null;
        allow write: if request.auth.uid != null;
      }
    }
    
    match /messages/{message=**} {
      allow read;
      allow write: if request.auth.uid != null;
    }
    
    match /tokens/{token=**} {
      allow read;
      allow write: if request.auth.uid != null;
    }
      
    match /consultations/{consultationId} {
      function isPublic() {
        return resource.data.groupType == 'public';
      }
      
      function hasMembershipRole() {
        let membershipDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)/memberships/$(consultationId)).data;
        return membershipDoc != null && membershipDoc.role != null;
      }
      
      function isConsultationCreator() {
        let consultation = get(/databases/$(database)/documents/consultations/$(consultationId)).data;
        return consultation != null && consultation.creator.uid == request.auth.uid;
      }
      
      allow read: if isPublic() || hasMembershipRole();
      allow write: if request.auth.uid == request.resource.data.creator.uid;
      
      match /meta/{metaId} {
        allow read: if request.auth.uid != null;
        allow write: if isConsultationCreator();
      }
    }
    
    match /news/{new} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid == request.resource.data.creator.uid;
    }
  }
}